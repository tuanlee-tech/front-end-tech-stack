# H∆∞·ªõng D·∫´n D·ª± √Ån Booking App

Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi **Booking App**, m·ªôt d·ª± √°n th·ª±c h√†nh frontend t·ª´ trung c·∫•p ƒë·∫øn n√¢ng cao, gi√∫p b·∫°n master React, Next.js, TypeScript, v√† c√°c k·ªπ nƒÉng production-ready! ·ª®ng d·ª•ng n√†y cho ph√©p ng∆∞·ªùi d√πng t√¨m ki·∫øm s·ª± ki·ªán, ƒë·∫∑t v√©, v√† nh·∫≠n c·∫≠p nh·∫≠t tr·∫°ng th√°i v√© theo th·ªùi gian th·ª±c (real-time). D·ª± √°n t·∫≠p trung v√†o **async data handling**, **real-time updates**, v√† **scalability**, v·ªõi m·ª•c ti√™u x√¢y d·ª±ng m·ªôt ·ª©ng d·ª•ng **performant**, **secure**, v√† **deployable**.

Phi√™n b·∫£n ƒë·∫ßu ti√™n s·ª≠ d·ª•ng **useState** v√† client-side rendering (CSR) ƒë·ªÉ gi·ªØ code ƒë∆°n gi·∫£n, d·ªÖ h·ªçc. C√°c l·∫ßn refactor sau s·∫Ω t√≠ch h·ª£p c√°c Hooks n√¢ng cao, Redux, GraphQL, server components, v√† testing to√†n di·ªán ƒë·ªÉ l·∫•p ƒë·∫ßy ki·∫øn th·ª©c v√† n√¢ng cao k·ªπ nƒÉng. Qua 2 l·∫ßn refactor, b·∫°n s·∫Ω h·ªçc t·ª´ c∆° b·∫£n ƒë·∫øn chuy√™n nghi·ªáp, kh√¥ng gi·ªõi h·∫°n b·ªüi ph·∫°m vi d·ª± √°n.

## üöÄ T·ªïng Quan D·ª± √Ån

Booking App l√† m·ªôt ·ª©ng d·ª•ng web cho ph√©p ng∆∞·ªùi d√πng t√¨m ki·∫øm s·ª± ki·ªán (v√≠ d·ª•: concert, h·ªôi th·∫£o), ƒë·∫∑t v√©, v√† theo d√µi s·ªë v√© c√≤n l·∫°i theo th·ªùi gian th·ª±c. ƒê√¢y l√† d·ª± √°n l√Ω t∆∞·ªüng ƒë·ªÉ h·ªçc c√°ch x√¢y d·ª±ng ·ª©ng d·ª•ng full-stack frontend v·ªõi:

- **Hi·ªáu Su·∫•t Cao**: T·ªëi ∆∞u latency <100ms cho queries, TTFB <500ms, bundle size <500KB.
- **Code S·∫°ch**: Modular, reusable, tu√¢n th·ªß ESLint/Prettier/Husky, code coverage >85%.
- **Th√¢n Thi·ªán V·ªõi Ng∆∞·ªùi D√πng**: Responsive, dark mode, loading skeletons, v√† a11y (accessibility).

### T√≠nh NƒÉng Ch√≠nh
- **Search Events**: T√¨m ki·∫øm s·ª± ki·ªán theo t·ª´ kh√≥a, ng√†y, v·ªã tr√≠; hi·ªÉn th·ªã danh s√°ch v·ªõi infinite scrolling.
- **Book Tickets**: Ch·ªçn s·ªë l∆∞·ª£ng v√©, ƒëi·ªÅn th√¥ng tin c√° nh√¢n, h·ªó tr·ª£ optimistic updates.
- **Real-Time Updates**: C·∫≠p nh·∫≠t s·ªë v√© c√≤n l·∫°i qua WebSocket, th√¥ng b√°o khi h·∫øt v√©.
- **User Features**: ƒêƒÉng nh·∫≠p/ƒëƒÉng xu·∫•t (local storage, m·ªü r·ªông sang NextAuth), dashboard l·ªãch s·ª≠ ƒë·∫∑t v√©.
- **Admin Basics**: Mock admin panel ƒë·ªÉ qu·∫£n l√Ω s·ª± ki·ªán (CRUD).
- **UI/UX**: Responsive, custom themes, loading skeletons cho SSR.

### M·ª•c Ti√™u H·ªçc T·∫≠p
- **React & Next.js**: Th√†nh th·∫°o concurrent rendering, server components, SSR/SSG/ISR, v√† App Router.
- **TypeScript**: S·ª≠ d·ª•ng discriminated unions, generics, v√† type-safe queries v·ªõi Zod/GraphQL Codegen.
- **State Management**: H·ªçc Redux Toolkit, RTK Query, v√† TanStack Query cho state ph·ª©c t·∫°p.
- **Data Fetching**: L√†m vi·ªác v·ªõi GraphQL (queries/mutations/subscriptions) v√† REST, t·ªëi ∆∞u v·ªõi dataloader.
- **Real-Time**: Tri·ªÉn khai WebSocket v·ªõi Socket.io, x·ª≠ l√Ω reconnection logic.
- **Testing**: X√¢y d·ª±ng test pyramid (unit, integration, E2E) v·ªõi Jest, React Testing Library, v√† Cypress.
- **DevOps**: Container h√≥a v·ªõi Docker, deploy l√™n Vercel, setup CI/CD v·ªõi GitHub Actions.

### Tech Stack (C·∫≠p Nh·∫≠t 14/08/2025)
D·ª±a tr√™n trends frontend 2025, s·ª≠ d·ª•ng c√°c phi√™n b·∫£n m·ªõi nh·∫•t:
- **React 19+**: Concurrent rendering, improved Suspense.
- **Next.js 15+**: App Router, edge runtime, server components.
- **TypeScript 5.6+**: Discriminated unions, schema inference.
- **Redux Toolkit 2.2+**: RTK Query, Redux Thunk/Saga.
- **TanStack Query 5+**: Data fetching, caching, infinite scroll.
- **GraphQL (Apollo Client 3.9+)**: Queries, mutations, subscriptions.
- **Tailwind CSS 4+ & shadcn/ui**: Responsive UI, custom themes.
- **Socket.io 5+**: Real-time updates.
- **Jest 30+, React Testing Library 16+, Cypress 14+**: Unit + E2E testing.
- **Docker**: Containerization cho staging.
- **Vercel**: Deployment v·ªõi previews.
- **GitHub Actions**: CI/CD pipelines.

### K·∫ø Ho·∫°ch Th·ª±c Hi·ªán
- **Th·ªùi Gian**: 8-10 tu·∫ßn, chia th√†nh:
  - **Tu·∫ßn 1-3**: Setup project, x√¢y d·ª±ng core features (Search Events, Book Tickets) v·ªõi useState, CSR.
  - **Tu·∫ßn 4-6**: Refactor l·∫ßn 1 (th√™m GraphQL, WebSocket, Redux, SSR).
  - **Tu·∫ßn 7-8**: Refactor l·∫ßn 2 (t·ªëi ∆∞u performance, th√™m E2E tests, a11y).
  - **Tu·∫ßn 9-10**: Ho√†n thi·ªán, deploy l√™n Vercel, t√≠ch h·ª£p g√≥c nh√¨n BA/QA/Tech Lead.
- **Refactor**: 2 l·∫ßn:
  - **L·∫ßn 1**: Chuy·ªÉn sang useReducer, Redux, GraphQL subscriptions, v√† SSR.
  - **L·∫ßn 2**: T·ªëi ∆∞u v·ªõi dataloader, E2E tests, a11y, v√† bundle size.
- **K·∫øt Qu·∫£**: Deploy ·ª©ng d·ª•ng l√™n Vercel, ƒë·∫°t latency <100ms, code coverage >85%, CLS=0.

---

## üõ† Setup D·ª± √Ån

D∆∞·ªõi ƒë√¢y l√† h∆∞·ªõng d·∫´n chi ti·∫øt ƒë·ªÉ setup m√¥i tr∆∞·ªùng ph√°t tri·ªÉn v·ªõi c√°c c√¥ng c·ª• m·ªõi nh·∫•t (t√≠nh ƒë·∫øn 14/08/2025).

### B∆∞·ªõc 1: T·∫°o Project v·ªõi Next.js
Ch·∫°y l·ªánh ƒë·ªÉ t·∫°o project v·ªõi TypeScript, Tailwind, v√† ESLint:

```bash
npx create-next-app@15.0.0 booking-app --typescript --eslint --tailwind --src-dir --app --import-alias "@/*"
cd booking-app
npm install
```

### B∆∞·ªõc 2: C√†i ƒê·∫∑t Dependencies
C√†i c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt:

```bash
npm install @tanstack/react-query@5.0.0 @apollo/client@3.9.0 graphql@16.8.1 socket.io-client@5.0.0 @hookform/resolvers@3.3.2 zod@3.22.4 @reduxjs/toolkit@2.2.0 react-redux@9.0.0 @mui/material@6.0.0 @emotion/react@11.11.1 @emotion/styled@11.11.0 @radix-ui/react-slot@1.0.2 @radix-ui/react-select@2.0.0 cypress@14.0.0 jest@30.0.0 ts-jest@30.0.0 @testing-library/react@16.0.0 @testing-library/jest-dom@6.1.0 @axe-core/react@4.8.2
npm install -D @typescript-eslint/eslint-plugin@6.7.4 @typescript-eslint/parser@6.7.4 eslint-plugin-react@7.33.2 eslint-plugin-react-hooks@4.6.0 prettier@3.0.3 husky@9.0.0
```

**Dependencies (Production)**:
- `@tanstack/react-query`: Data fetching v√† caching.
- `@apollo/client`, `graphql`: GraphQL queries/mutations/subscriptions.
- `socket.io-client`: Real-time updates.
- `@hookform/resolvers`, `zod`: Form validation.
- `@reduxjs/toolkit`, `react-redux`: State management.
- `@mui/material`, `@emotion/react`, `@emotion/styled`: UI components.
- `@radix-ui/react-slot`, `@radix-ui/react-select`: Headless UI.
- `cypress`, `jest`, `ts-jest`, `@testing-library/react`, `@testing-library/jest-dom`: Testing.
- `@axe-core/react`: Accessibility testing.

**DevDependencies**:
- `@typescript-eslint/eslint-plugin`, `@typescript-eslint/parser`: TypeScript linting.
- `eslint-plugin-react`, `eslint-plugin-react-hooks`: React linting.
- `prettier`, `husky`: Code formatting v√† pre-commit hooks.

### B∆∞·ªõc 3: C·∫•u H√¨nh Tailwind CSS
C·∫≠p nh·∫≠t `tailwind.config.ts`:

```typescript
import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: '#1E90FF',
        secondary: '#FF6347',
      },
    },
  },
  plugins: [],
};
export default config;
```

C·∫≠p nh·∫≠t `src/app/globals.css`:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground: #000;
  --background: #fff;
}
@media (prefers-color-scheme: dark) {
  :root {
    --foreground: #fff;
    --background: #1a1a1a;
  }
}
body {
  color: var(--foreground);
  background: var(--background);
}
```

### B∆∞·ªõc 4: C·∫•u H√¨nh ESLint + Prettier
T·∫°o `.eslintrc.js`:

```javascript
module.exports = {
  env: { browser: true, es2020: true, node: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
  ],
  parser: '@typescript-eslint/parser',
  plugins: ['react', '@typescript-eslint'],
  rules: {
    'react/prop-types': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    'react-hooks/exhaustive-deps': 'warn',
  },
};
```

T·∫°o `.prettierrc`:

```json
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2
}
```

C·∫•u h√¨nh Husky cho pre-commit:

```bash
npx husky-init && npm install
echo "npm run lint && npm run test" > .husky/pre-commit
```

### B∆∞·ªõc 5: C·∫•u H√¨nh TypeScript
C·∫≠p nh·∫≠t `tsconfig.json`:

```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
```

### B∆∞·ªõc 6: C·∫•u H√¨nh Jest
T·∫°o `jest.config.js`:

```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/tests/setup.ts'],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
};
```

T·∫°o `src/tests/setup.ts`:

```typescript
import '@testing-library/jest-dom';
import { configure } from '@testing-library/react';
configure({ testIdAttribute: 'data-testid' });
```

### B∆∞·ªõc 7: C·∫•u H√¨nh GitHub Actions
T·∫°o `.github/workflows/ci.yml`:

```yaml
name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - run: npm run test
      - run: npm run build
```

### B∆∞·ªõc 8: Kh·ªüi Ch·∫°y Project
```bash
npm run dev
```

M·ªü `http://localhost:3000` ƒë·ªÉ ki·ªÉm tra.

---

## üìÇ C·∫•u Tr√∫c Th∆∞ M·ª•c

C·∫•u tr√∫c feature-based, h·ªó tr·ª£ refactor qua c√°c phi√™n b·∫£n (`src-initial`, `src-refactor1`, `src-refactor2`):

```
booking-app/
‚îú‚îÄ‚îÄ src-initial/             # Phi√™n b·∫£n ƒë·∫ßu (useState, CSR)
‚îÇ   ‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ events/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [id]/page.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bookings/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ BookingForm.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useBooking.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ globals.css
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Input.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ EventCard.tsx
‚îÇ   ‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ events/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EventList.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ EventSearch.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useEvents.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bookings/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ BookingForm.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useBooking.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
‚îÇ   ‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.d.ts
‚îú‚îÄ‚îÄ src-refactor1/           # Refactor l·∫ßn 1 (Redux, GraphQL, SSR)
‚îú‚îÄ‚îÄ src-refactor2/           # Refactor l·∫ßn 2 (Dataloader, E2E, a11y)
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îî‚îÄ‚îÄ e2e/
‚îÇ       ‚îî‚îÄ‚îÄ booking.spec.ts
‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îú‚îÄ‚îÄ backlog.md
‚îÇ   ‚îú‚îÄ‚îÄ test-plan.md
‚îÇ   ‚îú‚îÄ‚îÄ guidelines.md
‚îÇ   ‚îî‚îÄ‚îÄ patterns.md
‚îú‚îÄ‚îÄ .github/workflows/
‚îÇ   ‚îî‚îÄ‚îÄ ci.yml
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ next.config.js
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ tailwind.config.ts
‚îî‚îÄ‚îÄ package.json
```

**L√Ω Do Scalable**: Feature-based, App Router h·ªó tr·ª£ parallel routes, d·ªÖ m·ªü r·ªông sang monorepo.

---

## üíª Code M·∫´u (Phi√™n B·∫£n ƒê·∫ßu Ti√™n)

Phi√™n b·∫£n ƒë·∫ßu ti√™n s·ª≠ d·ª•ng **useState**, **CSR**, v√† **fetch API** ƒë·ªÉ ƒë∆°n gi·∫£n, d·ªÖ h·ªçc. Code t·∫≠p trung v√†o **Search Events** v√† **Book Tickets**, v·ªõi mock API (MSW).

### 1. Types
T·∫°o `src-initial/types/index.d.ts`:

```typescript
export interface Event {
  id: string;
  title: string;
  date: string;
  location: string;
  availableTickets: number;
}

export interface Booking {
  id: string;
  eventId: string;
  userId: string;
  quantity: number;
}
```

**Tech Lead Review**:
- **T·ªët**: Types r√µ r√†ng, s·ª≠ d·ª•ng `interface` ƒë·ªÉ d·ªÖ m·ªü r·ªông.
- **C·∫£i Thi·ªán**: Th√™m discriminated unions cho `Event` (e.g., `type: 'concert' | 'workshop'`) trong refactor.

### 2. Mock API v·ªõi MSW
T·∫°o `src-initial/mocks/handlers.ts`:

```typescript
import { rest } from 'msw';

export const handlers = [
  rest.get('/api/events', (req, res, ctx) => {
    return res(
      ctx.json([
        {
          id: '1',
          title: 'Concert 2025',
          date: '2025-09-01',
          location: 'Hanoi',
          availableTickets: 100,
        },
      ])
    );
  }),
  rest.post('/api/bookings', async (req, res, ctx) => {
    const { eventId, quantity } = await req.json();
    return res(
      ctx.json({
        id: 'b1',
        eventId,
        userId: 'u1',
        quantity,
      })
    );
  }),
];
```

T·∫°o `src-initial/mocks/browser.ts`:

```typescript
import { setupWorker } from 'msw';
import { handlers } from './handlers';

export const worker = setupWorker(...handlers);
```

Kh·ªüi ƒë·ªông MSW trong `src-initial/app/layout.tsx`:

```typescript
'use client';

import { useEffect } from 'react';
import '../app/globals.css';

export default function RootLayout({ children }: { children: React.ReactNode }) {
  useEffect(() => {
    if (typeof window !== 'undefined') {
      import('../mocks/browser').then(({ worker }) => worker.start());
    }
  }, []);

  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}
```

**Tech Lead Review**:
- **T·ªët**: MSW m√¥ ph·ªèng API th·ª±c t·∫ø, d·ªÖ chuy·ªÉn sang backend th·∫≠t.
- **C·∫£i Thi·ªán**: Th√™m mock cho WebSocket trong refactor ƒë·ªÉ test real-time.

### 3. Search Events v·ªõi useState
T·∫°o `src-initial/features/events/hooks/useEvents.ts`:

```typescript
import { useState, useEffect } from 'react';
import { Event } from '@/types';

/**
 * Hook ƒë·ªÉ fetch danh s√°ch s·ª± ki·ªán
 * @returns {events, isLoading, error}
 */
export function useEvents() {
  const [events, setEvents] = useState<Event[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchEvents = async () => {
      setIsLoading(true);
      try {
        const res = await fetch('/api/events');
        const data = await res.json();
        setEvents(data);
      } catch (err) {
        setError('Failed to fetch events');
      } finally {
        setIsLoading(false);
      }
    };
    fetchEvents();
  }, []);

  return { events, isLoading, error };
}
```

T·∫°o `src-initial/features/events/components/EventList.tsx`:

```typescript
import { useEvents } from '../hooks/useEvents';
import { EventCard } from '@/components/EventCard';

/**
 * Component hi·ªÉn th·ªã danh s√°ch s·ª± ki·ªán
 */
export function EventList() {
  const { events, isLoading, error } = useEvents();

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div className="p-4">
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {events.map((event) => (
          <EventCard key={event.id} event={event} />
        ))}
      </div>
    </div>
  );
}
```

T·∫°o `src-initial/components/EventCard.tsx`:

```typescript
import { Event } from '@/types';
import { Button } from './Button';
import Link from 'next/link';

/**
 * Component hi·ªÉn th·ªã th√¥ng tin s·ª± ki·ªán
 * @param {Event} event - Th√¥ng tin s·ª± ki·ªán
 */
export const EventCard = ({ event }: { event: Event }) => {
  return (
    <div className="p-4 border rounded shadow-sm bg-white dark:bg-gray-800">
      <h3 className="font-bold">{event.title}</h3>
      <p>Date: {new Date(event.date).toLocaleDateString()}</p>
      <p>Location: {event.location}</p>
      <p>Tickets Available: {event.availableTickets}</p>
      <Link href={`/events/${event.id}`}>
        <Button>View Details</Button>
      </Link>
    </div>
  );
};
```

**Tech Lead Review**:
- **T·ªët**: Code ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu, s·ª≠ d·ª•ng `useState` v√† `fetch` cho phi√™n b·∫£n ƒë·∫ßu.
- **C·∫£i Thi·ªán**: Th√™m memoization (`React.memo`) ƒë·ªÉ t·ªëi ∆∞u render, chuy·ªÉn sang TanStack Query trong refactor.

### 4. Book Tickets v·ªõi useState
T·∫°o `src-initial/features/bookings/hooks/useBooking.ts`:

```typescript
import { useState } from 'react';
import { Booking } from '@/types';

/**
 * Hook ƒë·ªÉ x·ª≠ l√Ω ƒë·∫∑t v√©
 * @param {string} eventId - ID s·ª± ki·ªán
 * @returns {bookTicket, isLoading, error}
 */
export function useBooking(eventId: string) {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const bookTicket = async (quantity: number) => {
    setIsLoading(true);
    try {
      const res = await fetch('/api/bookings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ eventId, quantity }),
      });
      const data: Booking = await res.json();
      setIsLoading(false);
      return data;
    } catch (err) {
      setError('Failed to book ticket');
      setIsLoading(false);
      throw err;
    }
  };

  return { bookTicket, isLoading, error };
}
```

T·∫°o `src-initial/features/bookings/components/BookingForm.tsx`:

```typescript
import { useState } from 'react';
import { useBooking } from '../hooks/useBooking';
import { Button } from '@/components/Button';
import { Input } from '@/components/Input';

/**
 * Form ƒë·ªÉ ƒë·∫∑t v√©
 * @param {string} eventId - ID s·ª± ki·ªán
 */
export function BookingForm({ eventId }: { eventId: string }) {
  const [quantity, setQuantity] = useState('');
  const { bookTicket, isLoading, error } = useBooking(eventId);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const qty = parseInt(quantity);
    if (qty < 1 || qty > 10) {
      alert('Please enter a quantity between 1 and 10');
      return;
    }
    try {
      await bookTicket(qty);
      alert('Booking successful!');
      setQuantity('');
    } catch (err) {
      alert('Booking failed');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex flex-col gap-4 p-4">
      <div>
        <Input
          type="number"
          placeholder="Number of tickets"
          value={quantity}
          onChange={(e) => setQuantity(e.target.value)}
          aria-label="Ticket quantity"
        />
        {error && <span className="text-red-500">{error}</span>}
      </div>
      <Button type="submit" disabled={isLoading}>
        {isLoading ? 'Booking...' : 'Book Tickets'}
      </Button>
    </form>
  );
}
```

**Tech Lead Review**:
- **T·ªët**: Form ƒë∆°n gi·∫£n, x·ª≠ l√Ω l·ªói c∆° b·∫£n, d·ªÖ hi·ªÉu cho ng∆∞·ªùi m·ªõi.
- **C·∫£i Thi·ªán**: Th√™m validation v·ªõi Zod, t√≠ch h·ª£p React Hook Form, v√† optimistic updates trong refactor.

### 5. Shared Components
T·∫°o `src-initial/components/Button.tsx`:

```typescript
/**
 * Component Button t√°i s·ª≠ d·ª•ng
 * @param {React.ButtonHTMLAttributes<HTMLButtonElement>} props
 */
export function Button(props: React.ButtonHTMLAttributes<HTMLButtonElement>) {
  return (
    <button
      {...props}
      className={`px-4 py-2 bg-primary text-white rounded hover:bg-secondary disabled:opacity-50 ${props.className}`}
    />
  );
}
```

T·∫°o `src-initial/components/Input.tsx`:

```typescript
/**
 * Component Input t√°i s·ª≠ d·ª•ng
 * @param {React.InputHTMLAttributes<HTMLInputElement>} props
 */
export function Input(props: React.InputHTMLAttributes<HTMLInputElement>) {
  return (
    <input
      {...props}
      className={`p-2 border rounded w-full focus:outline-none focus:ring-2 focus:ring-primary ${props.className}`}
    />
  );
}
```

**Tech Lead Review**:
- **T·ªët**: Components t√°i s·ª≠ d·ª•ng, h·ªó tr·ª£ Tailwind cho styling.
- **C·∫£i Thi·ªán**: Th√™m a11y attributes (aria-label, role) v√† theme provider trong refactor.

---

## üîÑ K·∫ø Ho·∫°ch Refactor

D·ª± √°n ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ refactor 2 l·∫ßn, gi√∫p b·∫°n h·ªçc t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao:

### Refactor L·∫ßn 1: T√≠ch H·ª£p Redux, GraphQL, SSR
- **M·ª•c Ti√™u**: Chuy·ªÉn t·ª´ useState sang useReducer/Redux, th√™m GraphQL, v√† chuy·ªÉn sang SSR.
- **Chi Ti·∫øt**:
  - **useReducer**: Qu·∫£n l√Ω state ph·ª©c t·∫°p cho events/bookings (v√≠ d·ª•: reducer v·ªõi actions `FETCH_EVENTS`, `BOOK_TICKET`).
  - **Redux Toolkit**: Setup store, slices cho events, bookings, v√† user. S·ª≠ d·ª•ng RTK Query ƒë·ªÉ fetch data.
  - **GraphQL**: T√≠ch h·ª£p Apollo Client, chuy·ªÉn API sang queries/mutations/subscriptions.
  - **SSR**: Chuy·ªÉn EventList sang server component, d√πng `getServerSideProps` ho·∫∑c App Router‚Äôs server rendering.
  - **WebSocket**: Th√™m Socket.io ƒë·ªÉ c·∫≠p nh·∫≠t real-time s·ªë v√© c√≤n l·∫°i.
  - **Testing**: Th√™m unit tests cho reducers v√† integration tests cho GraphQL.

**V√≠ D·ª• useReducer**:
```typescript
interface EventState {
  events: Event[];
  isLoading: boolean;
  error: string | null;
}

type EventAction =
  | { type: 'FETCH_EVENTS_START' }
  | { type: 'FETCH_EVENTS_SUCCESS'; payload: Event[] }
  | { type: 'FETCH_EVENTS_ERROR'; payload: string };

const initialState: EventState = { events: [], isLoading: false, error: null };

function eventReducer(state: EventState, action: EventAction): EventState {
  switch (action.type) {
    case 'FETCH_EVENTS_START':
      return { ...state, isLoading: true, error: null };
    case 'FETCH_EVENTS_SUCCESS':
      return { ...state, isLoading: false, events: action.payload };
    case 'FETCH_EVENTS_ERROR':
      return { ...state, isLoading: false, error: action.payload };
    default:
      return state;
  }
}
```

**Tech Lead Review**:
- **L·ª£i √çch**: useReducer cung c·∫•p state logic r√µ r√†ng, d·ªÖ m·ªü r·ªông sang Redux.
- **L∆∞u √ù**: K·∫øt h·ª£p v·ªõi RTK Query ƒë·ªÉ gi·∫£m boilerplate trong refactor.

### Refactor L·∫ßn 2: T·ªëi ∆Øu Performance, E2E Testing, A11y
- **M·ª•c Ti√™u**: T·ªëi ∆∞u performance, th√™m E2E tests, v√† ƒë·∫£m b·∫£o accessibility.
- **Chi Ti·∫øt**:
  - **useRef, useLayoutEffect**: S·ª≠ d·ª•ng `useRef` ƒë·ªÉ l∆∞u DOM references (v√≠ d·ª•: focus input sau submit), `useLayoutEffect` ƒë·ªÉ x·ª≠ l√Ω side-effects li√™n quan ƒë·∫øn DOM.
  - **useImperativeHandle, useId**: T√≠ch h·ª£p `useImperativeHandle` cho custom form controls, `useId` cho accessible form labels.
  - **useTransition, useDeferredValue**: T·ªëi ∆∞u search v·ªõi `useTransition` ƒë·ªÉ x·ª≠ l√Ω state updates m∆∞·ª£t m√†, `useDeferredValue` cho debounced search.
  - **useDebugValue**: Th√™m debug info cho custom hooks (v√≠ d·ª•: `useEvents`).
  - **Dataloader**: T√≠ch h·ª£p GraphQL dataloader ƒë·ªÉ tr√°nh N+1 queries.
  - **E2E Testing**: Vi·∫øt Cypress tests cho booking flow v√† real-time updates.
  - **A11y**: Th√™m `axe-core` ƒë·ªÉ ki·ªÉm tra accessibility, ƒë·∫£m b·∫£o ARIA roles.
  - **Performance**: T·ªëi ∆∞u bundle size (<500KB) v·ªõi code splitting, lazy loading.

**V√≠ D·ª• useTransition**:
```typescript
import { useState, useTransition } from 'react';
import { useEvents } from '../hooks/useEvents';

/**
 * Component t√¨m ki·∫øm s·ª± ki·ªán v·ªõi useTransition
 */
export function EventSearch() {
  const [search, setSearch] = useState('');
  const [isPending, startTransition] = useTransition();
  const { events } = useEvents(search);

  const handleSearch = (value: string) => {
    startTransition(() => {
      setSearch(value);
    });
  };

  return (
    <div>
      <input
        type="text"
        value={search}
        onChange={(e) => handleSearch(e.target.value)}
        placeholder="Search events..."
        className="p-2 border rounded"
      />
      {isPending && <div>Searching...</div>}
      <div>{events.map((event) => <EventCard key={event.id} event={event} />)}</div>
    </div>
  );
}
```

**Tech Lead Review**:
- **L·ª£i √çch**: `useTransition` gi√∫p UX m∆∞·ª£t m√† khi search, gi·∫£m lag.
- **L∆∞u √ù**: K·∫øt h·ª£p `useDeferredValue` ƒë·ªÉ t·ªëi ∆∞u search v·ªõi d·ªØ li·ªáu l·ªõn.

---

## üìö Ki·∫øn Th·ª©c C√≤n Thi·∫øu & G·ª£i √ù H·ªçc Th√™m

D∆∞·ªõi ƒë√¢y l√† c√°c ch·ªß ƒë·ªÅ n√¢ng cao ƒë·ªÉ l·∫•p ƒë·∫ßy ki·∫øn th·ª©c:

1. **Server-Side Rendering (SSR/SSG/ISR)**:
   - **H·ªçc**: C√°ch Next.js x·ª≠ l√Ω hybrid rendering, khi n√†o d√πng SSG vs ISR.
   - **Th·ª±c H√†nh**: T·∫°o page SSG cho event list, ISR cho event detail.
   - **ƒê·ªÅ T√†i**: X√¢y d·ª±ng blog page v·ªõi SSG, ƒëo TTFB.

2. **Advanced State Management**:
   - **H·ªçc**: Redux Persist cho offline support, RTK Query caching strategies.
   - **Th·ª±c H√†nh**: Persist user state, cache events v·ªõi RTK Query.
   - **ƒê·ªÅ T√†i**: X√¢y d·ª±ng offline-first todo app.

3. **Animations**:
   - **H·ªçc**: Framer Motion cho micro-interactions.
   - **Th·ª±c H√†nh**: Th√™m animation cho EventCard (scale on hover).
   - **ƒê·ªÅ T√†i**: T·∫°o carousel v·ªõi Framer Motion.

4. **Accessibility (A11y)**:
   - **H·ªçc**: ARIA roles, keyboard navigation.
   - **Th·ª±c H√†nh**: Th√™m ARIA labels cho BookingForm, test v·ªõi `axe-core`.
   - **ƒê·ªÅ T√†i**: X√¢y d·ª±ng a11y-compliant modal component.

5. **Performance Optimization**:
   - **H·ªçc**: Code splitting, lazy loading, tree shaking.
   - **Th·ª±c H√†nh**: Lazy load EventList, ƒëo bundle size v·ªõi Webpack Analyzer.
   - **ƒê·ªÅ T√†i**: T·ªëi ∆∞u app c√≥ >1000 components.

6. **Micro-Frontends**:
   - **H·ªçc**: Module Federation cho scalable apps.
   - **Th·ª±c H√†nh**: T√°ch admin panel th√†nh micro-frontend.
   - **ƒê·ªÅ T√†i**: X√¢y d·ª±ng monorepo v·ªõi Nx.

---

## üìà Benchmark & Metrics

- **Latency**: Query latency <100ms (ƒëo v·ªõi Apollo DevTools).
- **Web Vitals**: LCP <1s, CLS=0 (ƒëo v·ªõi Lighthouse).
- **Bundle Size**: <500KB sau code splitting (ƒëo v·ªõi Webpack Analyzer).
- **Code Coverage**: >85% (ƒëo v·ªõi Jest).
- **TTFB**: <500ms (ƒëo v·ªõi Chrome Network tab).

---

## üßë‚Äçüíº G√≥c Nh√¨n T·ª´ C√°c Vai Tr√≤

### Business Analyst (BA)
- **User Stories**:
  - **As an event goer**, I want to **search events** by keyword, date, or location, so that I can **find events I‚Äôm interested in**.
  - **As an event goer**, I want to **book tickets** and see real-time availability, so that I **don‚Äôt miss out**.
- **MoSCoW**:
  - **Must Have**: Search events, book tickets, real-time updates.
  - **Should Have**: Responsive UI, dark mode.
  - **Could Have**: User dashboard.
  - **Won‚Äôt Have**: Full admin panel.
- **Th·ª±c H√†nh**: T·∫°o `docs/backlog.md` v·ªõi user stories, wireframes v·ªõi Figma.

### Quality Assurance (QA)
- **Test Pyramid**:
  - **Unit Tests**: Test reducers, hooks v·ªõi Jest.
  - **Integration Tests**: Test GraphQL queries/mutations.
  - **E2E Tests**: Test booking flow v·ªõi Cypress.
- **Edge Cases**: Network failures, concurrent bookings.
- **Th·ª±c H√†nh**: T·∫°o `docs/test-plan.md`, ch·∫°y load testing v·ªõi Artillery.

### Tech Lead
- **Architecture**: Next.js App Router, feature-based structure.
- **Code Review**: Ki·ªÉm tra race conditions trong real-time updates, ƒë·∫£m b·∫£o type safety.
- **Th·ª±c H√†nh**: T·∫°o `docs/guidelines.md` cho naming conventions, git workflow.

---

## üöÄ H√†nh ƒê·ªông Ti·∫øp Theo

1. **Ch·∫°y Project**:
   ```bash
   npm run dev
   ```
   M·ªü `http://localhost:3000` ƒë·ªÉ ki·ªÉm tra.

2. **Ch·∫°y Tests**:
   ```bash
   npm test
   npx cypress run
   ```

3. **Refactor**:
   - **L·∫ßn 1**: T√≠ch h·ª£p Redux, GraphQL, SSR.
   - **L·∫ßn 2**: T·ªëi ∆∞u performance, th√™m E2E tests, a11y.

4. **Deploy**:
   ```bash
   vercel --prod
   ```

5. **H·ªçc Th√™m**:
   - Th·ª±c h√†nh c√°c ƒë·ªÅ t√†i trong ph·∫ßn ‚ÄúKi·∫øn Th·ª©c C√≤n Thi·∫øu‚Äù.
   - ƒê·ªçc t√†i li·ªáu Next.js, Redux Toolkit, v√† GraphQL.

---